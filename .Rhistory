load("E:/PracticalMachineLearning/environment.RData")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
vowel.train$y<-factor(vowel.train$y)
summary(vowel.train)
str(vowel.train)
vowel.test$y<-factor(vowel.test$y)
modFit <- train(y~.,data=vowel.train,method="rf")
library(caret)
modFit <- train(y~.,data=vowel.train,method="rf")
modFit
plot(modFit)
print(modFit)
modFit2 <- train(y~.,data=vowel.train,method="gbm")
print(modFit2)
modPred <- predict(vowel.test,modFit)
modPred <- predict(modFit,vowel.test)
modPred2 <- predict(modFit2,vowel.test)
modPred
confusionMatrix(modPred,vowel.test$y)
confusionMatrix(modPred2,vowel.test$y)
library(ElemStatLearn)
library(caret)
set.seed(33833)
data(vowel.train)
data(vowel.test)
vowel.train$y<-factor(vowel.train$y)
vowel.test$y<-factor(vowel.test$y)
summary(vowel.train)
str(vowel.train)
modFit <- train(y~.,data=vowel.train,method="rf")
library(ElemStatLearn)
library(caret)
set.seed(33833)
data(vowel.train)
data(vowel.test)
vowel.train$y<-factor(vowel.train$y)
vowel.test$y<-factor(vowel.test$y)
summary(vowel.train)
str(vowel.train)
modFit <- train(y~.,data=vowel.train,method="rf")
modFit2 <- train(y~.,data=vowel.train,method="gbm", verbose=FALSE)
print(modFit)
print(modFit2)
modPred <- predict(modFit,vowel.test)
modPred2 <- predict(modFit2,vowel.test)
modPred
confusionMatrix(modPred,vowel.test$y)
confusionMatrix(modPred2,vowel.test$y)
confusionMatrix(modPred,modPred2)
predDF <- data.frame(modPred,modPred2,y=vowel.train$y)
predDF <- data.frame(modPred,modPred2,y=vowel.test$y)
combmodFit <- train(y~.,method="gam",data=predDF)
combPred <- predict(combmodFit,predDF)
combPred
combmodFit
confusionMatrix(combPred,vowel.test$y)
View(vowel.train)
View(predDF)
library(ElemStatLearn)
library(caret)
set.seed(33833)
data(vowel.train)
data(vowel.test)
vowel.train$y<-factor(vowel.train$y)
vowel.test$y<-factor(vowel.test$y)
summary(vowel.train)
str(vowel.train)
modFit <- train(y~.,data=vowel.train,method="rf")
modFit2 <- train(y~.,data=vowel.train,method="gbm", verbose=FALSE)
print(modFit)
print(modFit2)
modPred <- predict(modFit,vowel.test)
modPred2 <- predict(modFit2,vowel.test)
confusionMatrix(modPred,vowel.test$y)
confusionMatrix(modPred2,vowel.test$y)
predDF <- data.frame(modPred,modPred2,y=vowel.test$y)
combmodFit <- train(y~.,method="gam",data=predDF)
combPred <- predict(combmodFit,predDF)
confusionMatrix(combPred,vowel.test$y)
confusionMatrix(combPred,predDF$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modFit <- train(diagnosis~.,data=training,method="rf")
modFit2 <- train(diagnosis~.,data=training,method="gbm", verbose=FALSE)
modFit3 <- train(diagnosis~.,data=training,method="lda")
View(training)
cor(training[,-2])
str(training)
cor(training[,-(2)names=="diagnosis"])
cor(training[,-(names=="diagnosis")])
cor(training[,-(colnames=="diagnosis")])
cor(training[,-(colnames(training)=="diagnosis")])
View(training)
str<-str(training)
str<-str(training)
str
variabelen<-str(training)
view(training(,-2))
View(training(,-2))
View(training[],-2])
View(training[,-2])
cor(training[,-1])
comboInfo <- findLinearCombos(cor(training[,-1]))
comboInfo <- findLinearCombos(training[,-1])
comboInfo
type(training)
eapply(training,typeof)
eapply(.training,typeof)
.GlobalEnv
class(training)
lapply(mtcars, class)
lapply(training, class)
lapply(training, class)=="numeric"
lapply(training, class)[,2]=="numeric"
lapply(training, class)=="numeric"
training[,lapply(training, class)=="numeric"]
test<-training[,lapply(training, class)=="numeric"]
View(test)
View(test)
comboInfo <- findLinearCombos(test)
comboInfo
cor(test)
comboInfo <- findLinearCombos(matrix(test))
comboInfo <- findLinearCombos(as.matrix(test))
comboInfo
correlations <- cor(test, use="pairwise", method="spearman")
View(correlations)
View(correlations)
correlations[,1]>0.8
correlations[correlations[,1]>0.8,1]
correlations <- cor(test)
correlations[correlations[,1]>0.8,1]
View(training)
modFit3 <- train(diagnosis~.,data=training,method="lda")
warning()
modFit3 <- train(diagnosis~.,data=training,method="lda2")
correlations <- cor(test,method="pearson")
correlations[correlations[,1]>0.8,1]
modFit3 <- train(diagnosis~.,data=training,method="lda")
test<-training[,lapply(training, class)=="numeric"]
correlations <- cor(test)
correlations[correlations[,1]>0.5,1]
colnames(training)
names(correlations[correlations[,1]>0.5,1])
correlations[correlations[,1]>0.5,1]
correlations[correlations[,1]>0.7,1]
names(correlations[correlations[,1]>0.7,1])
highcor <- names(correlations[correlations[,1]>0.7,1])
training2<-training[,-highcor]
training2<-training[,-(colnames(trianing)==highcor)]
training2<-training[,-(colnames(training)==highcor)]
training2<-training[,-(colnames(training) %in% highcor)]
View(training2)
View(training2)
colnames(training) %in% highcor)
colnames(training) %in% highcor
modFit <- train(diagnosis~.,data=training2,method="rf")
modFit2 <- train(diagnosis~.,data=training2,method="gbm", verbose=FALSE)
modFit3 <- train(diagnosis~.,data=training2,method="lda")
View(training2)
highcor <- colnames(correlations[correlations[1,]>0.7,1])
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
test<-training[,lapply(training, class)=="numeric"]
correlations <- cor(test)
highcor <- colnames(correlations[correlations[1,]>0.7,1])
training2<-training[,-(colnames(training) %in% highcor)]
highcor <- names(correlations[correlations[,1]>0.7,1])
training2<-training[,-(colnames(training) %in% highcor)]
View(training2)
highcor
training2<-training[,!(colnames(training) %in% highcor)]
modFit <- train(diagnosis~.,data=training2,method="rf")
modFit2 <- train(diagnosis~.,data=training2,method="gbm", verbose=FALSE)
modFit3 <- train(diagnosis~.,data=training2,method="lda")
highcor <- names(correlations[correlations[,1]>0.6,1])
training2<-training[,!(colnames(training) %in% highcor)]
modFit <- train(diagnosis~.,data=training2,method="rf")
modFit2 <- train(diagnosis~.,data=training2,method="gbm", verbose=FALSE)
modFit3 <- train(diagnosis~.,data=training2,method="lda")
View(correlations)
which(correlations == max(correlations), arr.ind = TRUE)
which(correlations == max(correlations<>1), arr.ind = TRUE)
which(correlations == max(!correlations=1), arr.ind = TRUE)
which(correlations >0.9 & correlations <1, arr.ind = TRUE)
which(correlations >0.95 & correlations <1, arr.ind = TRUE)
which(correlations >0.91 & correlations <1, arr.ind = TRUE)
which(correlations >0.9 & correlations <1, arr.ind = TRUE)
which(correlations >0.9 & correlations <1)
which(correlations >0.9 & correlations <1, arr.ind = TRUE)
highcor <- c('NrCAM','tau')
training2<-training[,!(colnames(training) %in% highcor)]
modFit <- train(diagnosis~.,data=training2,method="rf")
modFit2 <- train(diagnosis~.,data=training2,method="gbm", verbose=FALSE)
modFit3 <- train(diagnosis~.,data=training2,method="lda")
highcor <- c('NrCAM','SOD','tau')
training2<-training[,!(colnames(training) %in% highcor)]
modFit <- train(diagnosis~.,data=training2,method="rf")
modFit2 <- train(diagnosis~.,data=training2,method="gbm", verbose=FALSE)
modFit3 <- train(diagnosis~.,data=training2,method="lda")
which(correlations >0.9 & correlations <1, arr.ind = TRUE)
which(correlations >0.8 & correlations <1, arr.ind = TRUE)
which(correlations >0.85 & correlations <1, arr.ind = TRUE)
which(correlations >0.80 & correlations <1, arr.ind = TRUE)
higcor<-which(correlations >0.80 & correlations <1, arr.ind = TRUE)
View(higcor)
highcor<-which(correlations >0.80 & correlations <1, arr.ind = TRUE)
highcor[highcor[,1]>highcor[,2]]
names(highcor[highcor[,1]>highcor[,2]])
rownames(highcor[highcor[,1]>highcor[,2]])
highcor[highcor[,1]>highcor[,2]]
highcor[highcor[,1]>highcor[,2],]
names(highcor[highcor[,1]>highcor[,2],])
highcor[highcor[,1]>highcor[,2],1]
rownames(highcor[highcor[,1]>highcor[,2],1])
highcor[highcor[,1]>highcor[,2],1]
highcor[highcor[,1]>highcor[,2],]
row.names(highcor[highcor[,1]>highcor[,2],])
highcor_var<-row.names(highcor[highcor[,1]>highcor[,2],])
training2<-training[,!(colnames(training) %in% highcor_var)]
modFit <- train(diagnosis~.,data=training2,method="rf")
modFit2 <- train(diagnosis~.,data=training2,method="gbm", verbose=FALSE)
modFit3 <- train(diagnosis~.,data=training2,method="lda")
highcor<-which(correlations >0.7 & correlations <1, arr.ind = TRUE)
highcor_var<-row.names(highcor[highcor[,1]>highcor[,2],])
#highcor <- names(correlations[correlations[,1]>0.6,1])
#highcor <- c('NrCAM','SOD','tau','Apolipoprotein_A2','Apolipoprotein_CI','Apolipoprotein_CIII','Angiotensinogen','Complement_3')
training2<-training[,!(colnames(training) %in% highcor_var)]
modFit <- train(diagnosis~.,data=training2,method="rf")
modFit2 <- train(diagnosis~.,data=training2,method="gbm", verbose=FALSE)
modFit3 <- train(diagnosis~.,data=training2,method="lda")
highcor<-which(correlations >0.6 & correlations <1, arr.ind = TRUE)
highcor_var<-row.names(highcor[highcor[,1]>highcor[,2],])
#highcor <- names(correlations[correlations[,1]>0.6,1])
#highcor <- c('NrCAM','SOD','tau','Apolipoprotein_A2','Apolipoprotein_CI','Apolipoprotein_CIII','Angiotensinogen','Complement_3')
training2<-training[,!(colnames(training) %in% highcor_var)]
modFit <- train(diagnosis~.,data=training2,method="rf")
modFit2 <- train(diagnosis~.,data=training2,method="gbm", verbose=FALSE)
modFit3 <- train(diagnosis~.,data=training2,method="lda")
highcor<-which(correlations >0.5 & correlations <1, arr.ind = TRUE)
highcor_var<-row.names(highcor[highcor[,1]>highcor[,2],])
#highcor <- names(correlations[correlations[,1]>0.6,1])
#highcor <- c('NrCAM','SOD','tau','Apolipoprotein_A2','Apolipoprotein_CI','Apolipoprotein_CIII','Angiotensinogen','Complement_3')
training2<-training[,!(colnames(training) %in% highcor_var)]
modFit <- train(diagnosis~.,data=training2,method="rf")
modFit2 <- train(diagnosis~.,data=training2,method="gbm", verbose=FALSE)
modFit3 <- train(diagnosis~.,data=training2,method="lda")
lapply(training, class)=="numeric"
lapply(training, class)!=="numeric"
lapply(training, class)!="numeric"
!(lapply(training, class)=="numeric")
(lapply(training, class)=="numeric")==FALSE
training@Genotype
training@Genotype
training$Genotype
lapply(training, class)=="numeric"
training2<-data.frame(test,training$diagnosis)
training2<-data.frame(test,training$diagnosis)
highcor<-which(correlations >0.5 & correlations <1, arr.ind = TRUE)
highcor_var<-row.names(highcor[highcor[,1]>highcor[,2],])
#highcor <- names(correlations[correlations[,1]>0.6,1])
#highcor <- c('NrCAM','SOD','tau','Apolipoprotein_A2','Apolipoprotein_CI','Apolipoprotein_CIII','Angiotensinogen','Complement_3')
training3<-training2[,!(colnames(training2) %in% highcor_var)]
modFit <- train(diagnosis~.,data=training3,method="rf")
modFit2 <- train(diagnosis~.,data=training2,method="gbm", verbose=FALSE)
modFit3 <- train(diagnosis~.,data=training3,method="lda")
training2<-data.frame(test,diagnosis=training$diagnosis)
highcor<-which(correlations >0.5 & correlations <1, arr.ind = TRUE)
highcor_var<-row.names(highcor[highcor[,1]>highcor[,2],])
#highcor <- names(correlations[correlations[,1]>0.6,1])
#highcor <- c('NrCAM','SOD','tau','Apolipoprotein_A2','Apolipoprotein_CI','Apolipoprotein_CIII','Angiotensinogen','Complement_3')
training3<-training2[,!(colnames(training2) %in% highcor_var)]
modFit <- train(diagnosis~.,data=training3,method="rf")
training2<-data.frame(test,diagnosis=training$diagnosis)
highcor<-which(correlations >0.9 & correlations <1, arr.ind = TRUE)
highcor_var<-row.names(highcor[highcor[,1]>highcor[,2],])
#highcor <- names(correlations[correlations[,1]>0.6,1])
#highcor <- c('NrCAM','SOD','tau','Apolipoprotein_A2','Apolipoprotein_CI','Apolipoprotein_CIII','Angiotensinogen','Complement_3')
training3<-training2[,!(colnames(training2) %in% highcor_var)]
modFit <- train(diagnosis~.,data=training3,method="rf")
modFit2 <- train(diagnosis~.,data=training3,method="gbm", verbose=FALSE)
modFit3 <- train(diagnosis~.,data=training3,method="lda")
print(modFit)
print(modFit2)
print(modFit3)
modPred <- predict(modFit,testing)
modPred2 <- predict(modFit2,testing)
modPred3 <- predict(modFit2,testing)
modPred3 <- predict(modFit3,testing)
predDF <- data.frame(modPred,modPred2,modPred3,diagnosis=testing$diagnosis)
combmodFit <- train(diagnosis~.,method="rf",data=predDF)
combPred <- predict(combmodFit,predDF)
confusionMatrix(combPred,predDF$y)
confusionMatrix(combPred,predDF$diagnosis)
#highcor <- names(correlations[correlations[,1]>0.6,1])
#highcor <- c('NrCAM','SOD','tau','Apolipoprotein_A2','Apolipoprotein_CI','Apolipoprotein_CIII','Angiotensinogen','Complement_3')
training2<-data.frame(test,diagnosis=training$diagnosis)
training3<-training2[,!(colnames(training2) %in% highcor_var)]
training4<-training[,!(colnames(training2) %in% highcor_var)]
modFit <- train(diagnosis~.,data=training4,method="rf")
modFit2 <- train(diagnosis~.,data=training4,method="gbm", verbose=FALSE)
modFit3 <- train(diagnosis~.,data=training3,method="lda")
print(modFit)
print(modFit2)
print(modFit3)
modPred <- predict(modFit,testing)
modPred2 <- predict(modFit2,testing)
modPred3 <- predict(modFit3,testing)
predDF <- data.frame(modPred,modPred2,modPred3,diagnosis=testing$diagnosis)
combmodFit <- train(diagnosis~.,method="rf",data=predDF)
combPred <- predict(combmodFit,predDF)
confusionMatrix(combPred,predDF$diagnosis)
confusionmatrix(modFit,training4$diagnosis)
confusionMatrix(modFit,training4$diagnosis)
confusionMatrix(modPred,testing$diagnosis)
confusionMatrix(modPred,testing$diagnosis)
confusionMatrix(modPred2,testing$diagnosis)
confusionMatrix(modPred3,testing$diagnosis)
confusionMatrix(modPred,testing$diagnosis)[1]
confusionMatrix(modPred,testing$diagnosis)[2]
confusionMatrix(modPred,testing$diagnosis)[3]
confusionMatrix(modPred,testing$diagnosis)[3]
confusionMatrix(modPred2,testing$diagnosis)[3]
confusionMatrix(modPred3,testing$diagnosis)[3]
confusionMatrix(combPred,predDF$diagnosis)[3]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
View(training)
modFit <- train(CompressiveStrength~.,data=training,method="lasso")
modFit
modPred <- predict(modFit,testing)
confusionMatrix(modPred,testing$CompressiveStrength)
modPred
confusionMatrix(modPred,testing$CompressiveStrength)
testing$CompressiveStrength
modPred
confusionMatrix(modPred,testing$CompressiveStrength)
str(modPred)
str(testing$CompressiveStrength)
set.seed(233)
modFit <- train(CompressiveStrength~.,data=training,method="lasso")
modPred <- predict(modFit,testing)
str(modPred)
str(testing$CompressiveStrength)
confusionMatrix(modPred,testing$CompressiveStrength)
pml.training <- read.csv("C:/Users/Cuchulainn/Dropbox/Assignments/Machine learning/pml-training.csv", header=TRUE)
pml.training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", header=TRUE)
pml.testing <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", header=TRUE)
View(pml.testing)
library(caret)
library(AppliedPredictiveModeling)
library(rattle)
library(RGtk2)
library(AppliedPredictiveModeling)
library(rpart.plot)
library(randomForest)
set.seed(3433)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml.training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", header=TRUE)
pml.testing <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", header=TRUE)
inTrain = createDataPartition(pml.training$classe, p = 3/4)[[1]]
training = pml.training[inTrain,-1]
validation = pml.training[-inTrain,-1]
testing = pml.testing[,-1]
training$classe[1:10]
summary(training)
sample<-sample(1:dim(training)[1],5)
regels5<-training[sample,]
preProc <- preProcess(training[,-1])
inTrain = createDataPartition(pml.training$classe, p = 3/4)[[1]]
training = pml.training[inTrain,-1]
validation = pml.training[-inTrain,-1]
testing = pml.testing[,-1]
training$classe[1:10]
summary(training)
sample<-sample(1:dim(training)[1],5)
regels5<-training[sample,]
str(training)
training$classe[1:10]
intrain[1:10,1:10]
inTrain[1:10,1:10]
inTrain[1:10,1:10]
pml.training[1:10,1:10]
inTrain = createDataPartition(pml.training$classe, p = 3/4)[[1]]
training = pml.training[inTrain,-1]
validation = pml.training[-inTrain,-1]
testing = pml.testing[,-1]
```
library(caret)
library(AppliedPredictiveModeling)
library(rattle)
library(RGtk2)
library(AppliedPredictiveModeling)
library(rpart.plot)
library(randomForest)
set.seed(3433)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml.training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", header=TRUE)
pml.testing <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", header=TRUE)
getwd()
library("knitr", lib.loc="~/R/win-library/3.1")
summary(training[is.na(training$amplitude_roll_dumbbell)==FALSE,])
str(training)[1:10]
str(training)[[1:10]]
str(training, list.len=10)
str(training, list.len=20)
LowVar <-nearZeroVar(training,freq=90/10)
training_pruned<-training[,-LowVar]
colSums(is.na(training_pruned)<14000)
is.na(training_pruned)
modFit1 <- train(classe ~ .,method="rpart",data=training_pruned2)
test_tree <- predict(modFit2,validation_pruned2)
confusionMatrix(test_tree,validation_pruned2$classe)
validation_pruned <- validation[,-nearZeroVar(training,freq=90/10)]
validation_pruned2 <- validation_pruned[,colSums(is.na(training_pruned))<14000]
modFit1 <- train(classe ~ .,method="rpart",data=training_pruned2)
test_tree <- predict(modFit2,validation_pruned2)
confusionMatrix(test_tree,validation_pruned2$classe)
test_tree <- predict(modFit1,validation_pruned2)
confusionMatrix(test_tree,validation_pruned2$classe)
